There are 2 problems with multi-threading approach across functions:
The first problem:
    we don't know anything about the functions, the order of executions might be important.
    meaning that we might have 2 functions f,g which sustains f(g(x)) != g(f(x)) .
The second problem:
    the data object is not thread safe, we might access an element with 2 different threads and corrupt the element.


One possible solution - implemented in Solution1.java
we can use a multi-threaded approach on the foreach method instead of transform method.
transform method will iterate over functions synchronously.
foreach method will create different thread for different elements in data.
since different elements are stored in different locations in memory, there is no danger to corrupt the data.
this kind of solution is great for scenarios where the transform method is heavy.